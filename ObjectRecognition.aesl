<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="4600" name="THRESHOLD"/>
<constant value="1500" name="THRESHOLD2"/>
<constant value="0" name="STOPPED"/>
<constant value="1" name="FORWARD"/>
<constant value="200" name="TARGET"/>
<constant value="2" name="TURNING"/>
<constant value="4" name="SCANNING"/>
<constant value="300" name="EDGE"/>
<constant value="849" name="EDGE2"/>
<constant value="4900" name="THRESHOLD3"/>
<constant value="7" name="TREASURE"/>
<constant value="4200" name="THRESHOLD4"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># variable declarations
var left = 0
var middle = 0
var right = 0
var state = STOPPED
var min
var max
var mean
var decision = 0
var hazard = 0
var path = 0 		# left is 0 right is 1
var L = 0
var R = 0
var color = 0
var check = 0
var stop2 = 0
var stop = 0
var LL = 0 	# set to 1 if course is LL

# reset timers to zero
timer.period[0] = 0
timer.period[1] = 0

# default state
onevent button.forward
state = FORWARD
motor.right.target = TARGET
motor.left.target = TARGET

onevent button.backward
state = STOPPED
motor.right.target = 0
motor.left.target = 0
decision = 0
# Main program
onevent prox
	call math.stat(prox.horizontal[0:4], min, max, mean) 
	when (max > THRESHOLD3 and decision == 0) do 			# when robot sees object
		callsub identify		# identify the barcode for which side is open
		callsub navigate		# decide how to navigate
	end
	
	when (max > THRESHOLD and decision == 1) do			# when robot sees object
		callsub identify2		# identify the barcode for treasure room
		callsub navigate		# decide how to navigate
	end
	
		when (max > THRESHOLD and decision == 2) do		# when robot sees object
		callsub identify3			# identify the barcode for color
		callsub navigate			# decide how to navigate
	end
	# when robot sees object and robot is on left path
	when (max > THRESHOLD and decision == 3 and L == 1) do	
		motor.right.target = 100
		motor.left.target = -100
		timer.period[0] = 1850
		state = TURNING
	end
	# when robot sees object and robot is on right path
		when (max > THRESHOLD and decision == 3 and R == 1) do 
		motor.right.target = -100
		motor.left.target = 100
		timer.period[0] = 1850
		state = TURNING
	end
	# when robot sees line
	when (decision == 4 and prox.ground.delta[0] &lt; EDGE) do
		 hazard++
		 # when robot doesn't see line
		 when(prox.ground.delta[0] > EDGE) do
		 	hazard++
		end
		# when robot sees line
		 when(prox.ground.delta[0] &lt; EDGE) do
		 	hazard++
		end
		# when robot doesn't see line
		 when(prox.ground.delta[0] > EDGE) do
		 	hazard++
		end
		# when robot sees line
		 when(prox.ground.delta[0] &lt; EDGE) do
		 	hazard++
		end
		when (hazard == 5) do
			timer.period[1] = 5000
			motor.right.target = 0
			motor.left.target = 0
			call sound.freq(440,10)
			call leds.top(32, 0 , 0)
			decision++
		end
	end
	# when robot sees object and left path to treasure room is open
	when (max > THRESHOLD and decision == 5 and path == 0) do
		motor.right.target = 100
		motor.left.target = -100
		timer.period[0] = 1850
		state = TURNING
	end
	# when robot sees object and right path to treasure room is open
	when (max > THRESHOLD and decision == 5 and path == 1) do
		motor.right.target = -100
		motor.left.target = 100
		timer.period[0] = 1850
		state = TURNING
	end
	# when robot sees object and left path to treasure room is open
	when (max > THRESHOLD and decision == 6 and path == 0) do
			motor.right.target = -100
		motor.left.target = 100
		timer.period[0] = 1850
		state = TURNING
	end
	# when robot sees object and right path to treasure room is open
	when (max > THRESHOLD and decision == 6 and path == 1) do
			motor.right.target = 100
		motor.left.target = -100
		timer.period[0] = 1850
		state = TURNING
	end
	
	when (decision == 7) do
		timer.period[1] = 3700
	end
	# when robot sees grey line
	when (decision == 8 and prox.ground.delta[0] > EDGE and prox.ground.delta[0] &lt; EDGE2) do
		stop++
	end
 	# when robot sees black line
	when stop == 1 and prox.ground.delta[0] &lt; EDGE do
		stop++
	end
	# when robot sees grey line and color is red
	when (prox.ground.delta[0] > EDGE and prox.ground.delta[0] &lt; EDGE2 and stop == 3 and color == 0) do
		state = STOPPED
		motor.right.target = 0
		motor.left.target = 0
		call leds.top(32, 0 , 0)
	end
	# when robot sees grey line and color is green
	when (prox.ground.delta[0] > EDGE and prox.ground.delta[0] &lt; EDGE2 and stop == 3 and color == 1) do
		state = STOPPED
		motor.right.target = 0
		motor.left.target = 0
		call leds.top(0, 32 , 0)
	end
	# when robot sees grey line and color is blue
	when (prox.ground.delta[0] > EDGE and prox.ground.delta[0] &lt; EDGE2 and stop == 3 and color == 2) do
		state = STOPPED
		motor.right.target = 0
		motor.left.target = 0
		call leds.top(0, 0 , 32)
	end
	# identify subroutine for first barcode
	sub identify 
	state = SCANNING
	if (R == 0 and L == 0) then
	if (prox.horizontal[1] > THRESHOLD) then
		left = 32
		L++
		call sound.freq(440,10)
		call leds.circle(0, 0 , 0 , 0 , 0 , 0 , 32, 0)
	else 
	right = 32
	R++
		call sound.freq(440,10)
		call leds.circle(0, 0 , 32 , 0 , 0 , 0 , 0, 0)
	end
	end
	# identify subroutine for second barcode
	sub identify2
	state = SCANNING
	if (stop2 != 1 and L == 0 and LL == 0) then
		if (prox.horizontal[3] > THRESHOLD) then
	call sound.freq(440,10)
	call leds.circle(0, 0 , 32 , 0 , 0 , 0 , 0, 0)
	path++
	stop2++
	else 
		call sound.freq(440,10)
	call leds.circle(0, 0 , 0 , 0 , 0 , 0 , 32, 0)
	stop2++
	end
	end
	
	if (stop2 != 1 and R == 0 and LL == 0) then
		if (prox.horizontal[1] > THRESHOLD) then
	call sound.freq(440,10)
	call leds.circle(0, 0 , 0 , 0 , 0 , 0 , 32, 0)
	stop2++
	else 
		call sound.freq(440,10)
	call leds.circle(0, 0 , 32 , 0 , 0 , 0 , 0, 0)
	path++
	stop2++
	end
	end
	
	if (stop2 != 1 and R == 0 and LL == 1) then
		if (prox.horizontal[1] > THRESHOLD4) then
	call sound.freq(440,10)
	call leds.circle(0, 0 , 0 , 0 , 0 , 0 , 32, 0)
	stop2++
	else 
		call sound.freq(440,10)
	call leds.circle(0, 0 , 32 , 0 , 0 , 0 , 0, 0)
	path++
	stop2++
	end
	end
	# identify subroutine for third barcode
	sub identify3 
	state = SCANNING
	if  check == 0 then
		if (prox.horizontal[3] > THRESHOLD) then
		color += 2
		check++
	else if (prox.horizontal[1] > THRESHOLD) then
		color = 0
		check++
		else 
		color = 1
		check++
		end
	end
	end
	
	# navigate subroutine
	sub navigate 
	if state != TURNING and decision == 0	 then
	if (left == 32 and max > THRESHOLD2) then
		motor.right.target = 100
		motor.left.target = -100
		timer.period[0] = 1850
		state = TURNING
		end
		
	 if (right == 32 and max > THRESHOLD2) then
		motor.right.target = -100
		motor.left.target = 100
		timer.period[0] = 1850
		state = TURNING
	end
	end
	if ((decision == 1) and (L == 1)) then
		motor.right.target = -100
		motor.left.target = 100
		timer.period[0] = 1850
		state = TURNING
	end
	if ((decision == 1) and (R == 1))  then
		motor.right.target = 100
		motor.left.target = -100
		timer.period[0] = 1850
		state = TURNING
	end
	
		if ((decision == 2) and (R == 1))  then
		motor.right.target = 100
		motor.left.target = -100
		timer.period[0] = 1850
		state = TURNING
	end
	
		if ((decision == 2) and (L == 1))  then
		motor.right.target = -100
		motor.left.target = 100
		timer.period[0] = 1850
		state = TURNING
	end
	
	onevent timer0
	timer.period[0] = 0
	if decision != 7 then
	motor.left.target = TARGET
	motor.right.target = TARGET
	state = FORWARD
	decision++
	end
	
	if decision == 7 and state == TREASURE then
		motor.right.target = TARGET
		motor.left.target = TARGET
		decision++
	end

	
	onevent timer1
	if decision == 5 then
		state = FORWARD
	motor.left.target = TARGET
	motor.right.target = TARGET
	end
	
	if decision == 7 and path == 0 then
	state = TREASURE
	timer.period[0] = 1850
		motor.right.target = -100
		motor.left.target = 100
	end
	
	if decision == 7 and path == 1 then
	state = TREASURE
	timer.period[0] = 1850
		motor.right.target = 100
		motor.left.target = -100
	end
		timer.period[1] = 0
		
		
</node>


</network>
